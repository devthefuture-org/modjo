diff --git a/cjs/src/connection.js b/cjs/src/connection.js
index 10184ca3c5f59b1d1ddd8e4ce33798666abec2a7..0ddc7cfb6f57a3ccd5de11a4415f765a95f8235e 100644
--- a/cjs/src/connection.js
+++ b/cjs/src/connection.js
@@ -165,6 +165,8 @@ function Connection(options, queues = {}, { onopen = noop, onend = noop, onclose
         : (query = q, query.active = true)
 
       build(q)
+      q.statistics && (q.statistics.executed = performance.now())
+      q.handler.onquery && (q.handler.onquery = q.handler.onquery(q))
       return write(toBuffer(q))
         && !q.describeFirst
         && !q.cursorFn
diff --git a/cjs/src/index.js b/cjs/src/index.js
index 40ac2c180fe2c12978715ad94d069335f801397a..aa3f4b0cc9dbcea8d66b52021e2b38fb0639008e 100644
--- a/cjs/src/index.js
+++ b/cjs/src/index.js
@@ -85,6 +85,8 @@ function Postgres(a, b) {
 
   function Sql(handler) {
     handler.debug = options.debug
+    handler.stats = options.stats
+    handler.onquery = options.onquery
 
     Object.entries(options.types).reduce((acc, [name, type]) => {
       acc[name] = (x) => new Parameter(x, type.to)
@@ -491,6 +493,8 @@ function parseOptions(a, b) {
     onclose         : o.onclose,
     onparameter     : o.onparameter,
     socket          : o.socket,
+    stats           : o.stats,
+    onquery         : o.onquery,
     transform       : parseTransform(o.transform || { undefined: undefined }),
     parameters      : {},
     shared          : { retries: 0, typeArrayMap: {} },
diff --git a/cjs/src/query.js b/cjs/src/query.js
index 45327f2fabcdbf8f8ec5020675012c310c04fee6..da3d545fdfd7ae90f783133ef5b8a03027dcc11f 100644
--- a/cjs/src/query.js
+++ b/cjs/src/query.js
@@ -13,6 +13,10 @@ const Query = module.exports.Query = class Query extends Promise {
       reject = b
     })
 
+    this.resolver = resolve
+    this.rejecter = reject
+
+    this.statistics = handler.stats || handler.debug ? { started: -1, executed: -1 } : undefined
     this.tagged = Array.isArray(strings.raw)
     this.strings = strings
     this.args = args
@@ -23,19 +27,30 @@ const Query = module.exports.Query = class Query extends Promise {
     this.state = null
     this.statement = null
 
-    this.resolve = x => (this.active = false, resolve(x))
-    this.reject = x => (this.active = false, reject(x))
-
     this.active = false
     this.cancelled = null
     this.executed = false
     this.signature = ''
 
-    this[originError] = this.handler.debug
+    this[originError] = handler.debug
       ? new Error()
       : this.tagged && cachedError(this.strings)
   }
 
+  resolve(x) {
+    this.active = false
+    this.statistics && addStats(this, x)
+    this.handler.onquery && (this.handler.onquery = this.handler.onquery(x))
+    this.resolver(x)
+  }
+
+  reject(x) {
+    this.active = false
+    this.statistics && addStats(this, x)
+    this.handler.onquery && (this.handler.onquery = this.handler.onquery(x))
+    this.rejecter(x)
+  }
+
   get origin() {
     return (this.handler.debug
       ? this[originError].stack
@@ -131,13 +146,25 @@ const Query = module.exports.Query = class Query extends Promise {
     return this
   }
 
+  stats() {
+    this.statistics = { started: -1, executed: -1 }
+    return this
+  }
+
   values() {
     this.isRaw = 'values'
     return this
   }
 
   async handle() {
-    !this.executed && (this.executed = true) && await 1 && this.handler(this)
+    if (this.executed)
+      return
+
+    this.executed = true
+    await 1
+    this.statistics && (this.statistics.started = performance.now())
+    this.handler.onquery && (this.handler.onquery = this.handler.onquery(this))
+    this.handler(this)
   }
 
   execute() {
@@ -171,3 +198,10 @@ function cachedError(xs) {
   Error.stackTraceLimit = x
   return originCache.get(xs)
 }
+
+
+function addStats(query, result) {
+  result.waiting = query.statistics.executed - query.statistics.started
+  result.duration = performance.now() - query.statistics.started
+  result.execution = performance.now() - query.statistics.executed
+}
